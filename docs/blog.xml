<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>galax.dev</title>
<link>https://www.galax.dev/blog.html</link>
<atom:link href="https://www.galax.dev/blog.xml" rel="self" type="application/rss+xml"/>
<description>Personal Page</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sun, 12 Nov 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>LR Schedulers Implementation From Scratch</title>
  <link>https://www.galax.dev/posts/00_lr_scheduler_from_scratch.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="1">
<details>
<summary>Importing utilities (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch,math,functools</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pdb</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tinyai.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tinyai.conv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tinyai.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tinyai.activations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tinyai.init <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tinyai.sgd <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF,torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor,nn,optim</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lr_scheduler</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x,math.pi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([ 0.0000,  1.1111,  2.2222,  3.3333,  4.4444,  5.5556,  6.6667,  7.7778,
         8.8889, 10.0000]) 3.141592653589793</code></pre>
</div>
</div>
<p>How we want our learning rate to look at.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_thing(f,lr,steps):</span>
<span id="cb4-2">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,math.pi,steps)</span>
<span id="cb4-3">    plt.plot(x,(f(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb4-4">plot_thing(partial(torch.cos),lr,steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="plot-of-cosine-function" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/plot-of-cosine-function-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Cosine Function</figcaption>
</figure>
</div>
</div>
</div>
<section id="lets-try-in-learner" class="level3">
<h3 class="anchored" data-anchor-id="lets-try-in-learner">Lets try in learner</h3>
<div class="cell" data-execution_count="4">
<details>
<summary>Importing and transfroming dataset (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">xl,yl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x label, y label</span></span>
<span id="cb5-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fashion_mnist"</span></span>
<span id="cb5-3">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb5-4">xmean,xstd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.28</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@inplace</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> transformi(b): b[xl] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(TF.to_tensor(o)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>xmean)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>xstd <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> b[xl]]</span>
<span id="cb5-8"></span>
<span id="cb5-9">dsd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name)</span>
<span id="cb5-10">tds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dsd.with_transform(transformi)</span>
<span id="cb5-11">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders.from_dd(tds, bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="cosineannealinglr" class="level1">
<h1>CosineAnnealingLR</h1>
<section id="first-version." class="level3">
<h3 class="anchored" data-anchor-id="first-version.">First Version.</h3>
<p>Cosine Annealing LR implementation from scratch, which had to be updated for the OneCycleLR</p>
<p>This version might be a little faster but take more memory.(not tested)</p>
<div class="cell" data-execution_count="5">
<details>
<summary>First Version. (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CosAnnLR():</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,tmax,optim):</span>
<span id="cb6-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim</span>
<span id="cb6-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmax</span>
<span id="cb6-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>]</span>
<span id="cb6-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._init_values()</span>
<span id="cb6-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _init_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.cos(torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,math.pi,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tmax))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr</span>
<span id="cb6-11"></span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step]</span>
<span id="cb6-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
</div>
</section>
<section id="second-version" class="level3">
<h3 class="anchored" data-anchor-id="second-version">Second Version</h3>
<p>CosineAnnealingLR implementation from scratch.</p>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Second Version. (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-overflow-scroll number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CosAnnLR():</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,tmax,optim):</span>
<span id="cb7-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim</span>
<span id="cb7-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>]</span>
<span id="cb7-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmax</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-7">    </span>
<span id="cb7-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  (math.cos(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.pi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr</span>
<span id="cb7-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _lr(cb): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cb.pg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Callback that will allow us to record LR during learning.</span></span></code></pre></div>
</div>
</section>
<section id="preparing-the-learner-for-training." class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-learner-for-training.">Preparing the learner for training.</h2>
<div class="cell" data-execution_count="8">
<details>
<summary>Code for learner. (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">act_gr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(GeneralRelu, leak<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, sub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb9-2">metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MetricsCB(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MulticlassAccuracy())</span>
<span id="cb9-3">astats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ActivationStats(fc.risinstance(GeneralRelu))</span>
<span id="cb9-4">cbs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DeviceCB(), metrics, ProgressCB(plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>), astats]</span>
<span id="cb9-5">iw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(init_weights, leaky<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb9-6">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8">lr,epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb9-9">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model(act_gr, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.BatchNorm2d).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(iw)</span>
<span id="cb9-10">tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train)</span>
<span id="cb9-11">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(CosAnnLR,tmax)</span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#sched = partial(lr_scheduler.CosineAnnealingLR,T_max = tmax) </span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing if it works with pytorch's CosineAnnealingLR </span></span>
<span id="cb9-14"></span>
<span id="cb9-15">record <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecorderCB(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_lr)</span>
<span id="cb9-16">xtra <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [BatchSchedCB(sched),record]</span>
<span id="cb9-17">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainLearner(model, dls, F.cross_entropy, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>xtra, opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optim.AdamW)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">learn.fit(epochs)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.806</td>
<td>0.529</td>
<td>0</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.853</td>
<td>0.404</td>
<td>0</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.876</td>
<td>0.338</td>
<td>1</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.872</td>
<td>0.349</td>
<td>1</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.892</td>
<td>0.295</td>
<td>2</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.882</td>
<td>0.326</td>
<td>2</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.904</td>
<td>0.264</td>
<td>3</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.887</td>
<td>0.316</td>
<td>3</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.910</td>
<td>0.248</td>
<td>4</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.887</td>
<td>0.310</td>
<td>4</td>
<td>eval</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-10-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Plot of learning rate throughout the learning process</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">record.plot()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">astats.color_dim()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Weight’s distribution.</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">astats.plot_stats()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Weight’s Means and Stdves throughout the learning process.</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">astats.dead_chart()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Weight’s that are = 0.</figcaption>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="cosineannealing-summary." class="level1">
<h1>CosineAnnealing Summary.</h1>
<p>After creating my own <code>CosineAnnealing</code> I decided to look for paper where it was introduced, and I found this <a href="https://arxiv.org/abs/1608.03983v5">paper</a>.<br>
Where we can find this equation. <img src="https://latex.codecogs.com/png.latex?%20%5Ceta_%7Bt%7D%20=%20%5Ceta_%7Bmin%7D%5E%7Bi%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cleft(%5Ceta_%7Bmax%7D%5E%7Bi%7D-%5Ceta_%7Bmin%7D%5E%7Bi%7D%5Cright)%5Cleft(1+%5Ccos%5Cleft(%5Cfrac%7BT_%7Bcur%7D%7D%7BT_%7Bi%7D%7D%5Cpi%5Cright)%5Cright)%20"></p>
<p>If we compared it to our code, it looks completely different.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">(math.cos(cur_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.pi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lr</span></code></pre></div>
<p>But if we read the paper further, the η and T could be translated to our code. Where: <img src="https://latex.codecogs.com/png.latex?%20%5Ceta%20%5Ctext%7B%20(eta)%20-%20is%20learning%20rate%20%7D%20"> <img src="https://latex.codecogs.com/png.latex?%20T_%7Bcur%7D%20%5Ctext%7B%20-%20is%20current%20step%20%7D"> <img src="https://latex.codecogs.com/png.latex?%20t_%7Bi%7D%20%5Ctext%7B%20-%20is%20our%20tmax%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20lr_%7Bt%7D%20=%20lr_%7Bmin%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cleft(lr_%7Bmax%7D-lr_%7Bmin%7D%5Cright)%5Cleft(1+%5Ccos%5Cleft(%5Cfrac%7B%5Ctext%7Bcurstep%7D%7D%7Btmax%7D%5Cpi%5Cright)%5Cright)%20"></p>
<p>The paper’s equation introduces <code>min</code> &amp; <code>max</code> learning rate, therefore the difference. But the rest is the same.</p>
</section>
<section id="onecyclelr" class="level1">
<h1>OneCycleLR</h1>
<p>CLR should specify <code>minmum</code> and <code>maximum</code> learning rate boundaries and a <code>step_size</code>,<br>
but this implementation doesn’t do that.<br>
Adding minimum and maximum should be pretty straight forward, tho.<br>
You also might want to add a 3rd phase where learning rate is at its maximum for 5-10% of the training.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> OneCycleLR:</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This version of OneCycle was create before looking up CosineAnnealing paper.</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb16-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tmax, optim, warm_up:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>):</span>
<span id="cb16-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim</span>
<span id="cb16-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.initial_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>]</span>
<span id="cb16-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'betas'</span>]</span>
<span id="cb16-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb16-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> warm_up</span>
<span id="cb16-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up)</span>
<span id="cb16-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.annealing_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps</span>
<span id="cb16-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-14"></span>
<span id="cb16-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_beta(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,phase:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,warming_up: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>):</span>
<span id="cb16-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> warming_up:</span>
<span id="cb16-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((math.cos(math.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phase) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb16-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((math.cos(math.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phase) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-20"></span>
<span id="cb16-21">    </span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb16-23">        </span>
<span id="cb16-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># warm_up phase</span></span>
<span id="cb16-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps:</span>
<span id="cb16-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increasing learning rate</span></span>
<span id="cb16-27">            phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps</span>
<span id="cb16-28">            adjusted_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.cos(phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>math.pi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.initial_lr</span>
<span id="cb16-29">            adjusted_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_beta(phase, warming_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb16-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decreasing learning rate</span></span>
<span id="cb16-32">            phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.annealing_steps</span>
<span id="cb16-33">            adjusted_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.cos(phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.initial_lr</span>
<span id="cb16-34">            adjusted_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_beta(phase, warming_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-35"></span>
<span id="cb16-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjusted_lr min_max</span></span>
<span id="cb16-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adjusted_lr</span>
<span id="cb16-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'betas'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (adjusted_beta,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta_2)</span>
<span id="cb16-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _beta1(cb): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cb.pg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'betas'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb17-2">rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecorderCB(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_lr, mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_beta1)</span></code></pre></div>
</div>
<section id="preparing-the-learner-for-training.-1" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-learner-for-training.-1">Preparing the learner for training.</h2>
<div class="cell" data-execution_count="16">
<details>
<summary>Code for learner. (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">act_gr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(GeneralRelu, leak<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, sub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb18-2">metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MetricsCB(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MulticlassAccuracy())</span>
<span id="cb18-3">astats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ActivationStats(fc.risinstance(GeneralRelu))</span>
<span id="cb18-4">cbs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DeviceCB(), metrics, ProgressCB(plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>), astats]</span>
<span id="cb18-5">iw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(init_weights, leaky<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb18-8"></span>
<span id="cb18-9">lr,epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb18-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model(act_gr, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.BatchNorm2d).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(iw)</span>
<span id="cb18-11">tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train)</span>
<span id="cb18-12">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(OneCycleLR,tmax)</span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#sched = partial(lr_scheduler.OneCycleLR,max_lr = lr,total_steps = tmax) # Testing if it works with pytorch's CosineAnnealingLR </span></span>
<span id="cb18-14"></span>
<span id="cb18-15">record <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecorderCB(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_lr, mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_beta1)</span>
<span id="cb18-16">xtra <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [BatchSchedCB(sched),record]</span>
<span id="cb18-17">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainLearner(model, dls, F.cross_entropy, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>xtra, opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optim.AdamW)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">learn.fit(epochs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.723</td>
<td>0.827</td>
<td>0</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.822</td>
<td>0.485</td>
<td>0</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.860</td>
<td>0.386</td>
<td>1</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.864</td>
<td>0.368</td>
<td>1</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.887</td>
<td>0.310</td>
<td>2</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.877</td>
<td>0.338</td>
<td>2</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.902</td>
<td>0.268</td>
<td>3</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.882</td>
<td>0.316</td>
<td>3</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.912</td>
<td>0.242</td>
<td>4</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.888</td>
<td>0.303</td>
<td>4</td>
<td>eval</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-18-output-3.png" class="img-fluid"></p>
</div>
</div>
<blockquote class="blockquote">
<p>Note: If you happened to know why does the learning doesn’t go smoothly at the beginning, u can dm me on discord <span class="citation" data-cites="afterhoursbilly">@afterhoursbilly</span></p>
</blockquote>
<p>Plot of Learning Rate and Momentum throughout the learning process</p>
<div class="cell" data-scrolled="true" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">record.plot()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">astats.plot_stats()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Weight’s Means and Stdves throughout the learning process.</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">astats.dead_chart()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Weight’s that are = to 0.</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">astats.color_dim()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure: Plot of Weight’s distribution.</figcaption>
</figure>
</div>
</div>
</div>
<section id="onecycle-summary" class="level3">
<h3 class="anchored" data-anchor-id="onecycle-summary">OneCycle Summary</h3>
<blockquote class="blockquote">
<p>Inspired by <a href="https://arxiv.org/abs/1803.09820">paper</a>, &amp; <a href="https://course.fast.ai/Lessons/part2.html">fast.ai</a> 22part course</p>
</blockquote>
<blockquote class="blockquote">
<p>This CLR implements <code>minmum</code> and <code>maximum</code> learning rate boundaries</p>
</blockquote>
<p>We could also add a phase where learning rate is at its maximum for 5-10% of the training.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> OneCycleLR:</span>
<span id="cb24-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Modified version after looking up papers.</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb24-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tmax, optim, warm_up:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>):</span>
<span id="cb24-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim</span>
<span id="cb24-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.initial_lr,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>],<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb24-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'betas'</span>]</span>
<span id="cb24-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb24-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> warm_up</span>
<span id="cb24-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up)</span>
<span id="cb24-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.annealing_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps</span>
<span id="cb24-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb24-14"></span>
<span id="cb24-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cosine_annealing(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,phase,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>):</span>
<span id="cb24-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((math.cos(math.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phase)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-17">    </span>
<span id="cb24-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb24-19">        </span>
<span id="cb24-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># warm_up phase</span></span>
<span id="cb24-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps:</span>
<span id="cb24-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increasing learning rate</span></span>
<span id="cb24-23">            phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps</span>
<span id="cb24-24">            adjusted_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cosine_annealing(phase,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.initial_lr,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_lr)</span>
<span id="cb24-25">            adjusted_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cosine_annealing(phase,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta)</span>
<span id="cb24-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb24-27">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decreasing learning rate</span></span>
<span id="cb24-28">            phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.warm_up_steps) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.annealing_steps</span>
<span id="cb24-29">            adjusted_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cosine_annealing(phase,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_lr,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.initial_lr)</span>
<span id="cb24-30">            adjusted_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cosine_annealing(phase,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_beta,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_beta)</span>
<span id="cb24-31"></span>
<span id="cb24-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjusted_lr min_max</span></span>
<span id="cb24-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adjusted_lr</span>
<span id="cb24-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'betas'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (adjusted_beta,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta_2)</span>
<span id="cb24-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">lr,epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb25-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model(act_gr, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.BatchNorm2d).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(iw)</span>
<span id="cb25-3">tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train)</span>
<span id="cb25-4">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(OneCycleLR,tmax)</span>
<span id="cb25-5"></span>
<span id="cb25-6">record <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecorderCB(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_lr, mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_beta1)</span>
<span id="cb25-7">xtra <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [BatchSchedCB(sched),record]</span>
<span id="cb25-8">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainLearner(model, dls, F.cross_entropy, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>xtra, opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optim.AdamW)</span>
<span id="cb25-9">learn.fit(epochs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.696</td>
<td>0.921</td>
<td>0</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.825</td>
<td>0.476</td>
<td>0</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.857</td>
<td>0.391</td>
<td>1</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.861</td>
<td>0.385</td>
<td>1</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.884</td>
<td>0.317</td>
<td>2</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.875</td>
<td>0.348</td>
<td>2</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.900</td>
<td>0.272</td>
<td>3</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.882</td>
<td>0.322</td>
<td>3</td>
<td>eval</td>
</tr>
<tr class="odd">
<td>0.913</td>
<td>0.241</td>
<td>4</td>
<td>train</td>
</tr>
<tr class="even">
<td>0.886</td>
<td>0.315</td>
<td>4</td>
<td>eval</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_lr_scheduler_from_scratch_files/figure-html/cell-24-output-3.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Deep Learning</category>
  <category>Implementation</category>
  <guid>https://www.galax.dev/posts/00_lr_scheduler_from_scratch.html</guid>
  <pubDate>Sun, 12 Nov 2023 23:00:00 GMT</pubDate>
  <media:content url="https://www.galax.dev/posts/images/onecycle.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>An Image-to-Image Implementation</title>
  <link>https://www.galax.dev/posts/00_Image-to-Image.html</link>
  <description><![CDATA[ 



<section id="text-guided-image-to-image-implementation" class="level1">
<h1>Text-Guided: Image-to-Image Implementation</h1>
<p>This Python code demonstrates the implementation of the Image-to-Image technique, allowing you to generate new images from existing ones with the help of textual prompts.</p>
<p>Explore how this innovative approach combines images and text to create visually compelling artworks. Dive into the code to understand the mechanics behind this cutting-edge image generation technique.</p>
<div class="cell">
<details>
<summary>Pip install necessary libraries (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uq diffusers transformers fastcore fastdownload</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Importing utilities (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPTextModel, CLIPTokenizer</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LMSDiscreteScheduler</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoencoderKL, UNet2DConditionModel</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastDownload</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> (Path.home()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.cache/huggingface'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token'</span>).exists(): notebook_login()</span>
<span id="cb2-15">logging.disable(logging.WARNING)</span></code></pre></div>
</details>
</div>
<p>We need to load in the required libraries and set up the models.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTokenizer.from_pretrained(</span>
<span id="cb3-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16)</span>
<span id="cb3-3"></span>
<span id="cb3-4">text_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTextModel.from_pretrained(</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here we use a different VAE to the original release, which has been fine-tuned for more steps</span></span>
<span id="cb3-8">vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(</span>
<span id="cb3-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stabilityai/sd-vae-ft-ema"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11">unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet2DConditionModel.from_pretrained(</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unet"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
</div>
<p>Define the parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb4-2">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb4-3">num_inference_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb4-4">guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb4-5">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-6">beta_start,beta_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00085</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.012</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler(beta_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_start, beta_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_end, beta_schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaled_linear"</span>, num_train_timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">plt.plot(scheduler.sigmas)</span>
<span id="cb6-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noise Schedule'</span>)</span>
<span id="cb6-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sampling step'</span>)</span>
<span id="cb6-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>)</span>
<span id="cb6-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_Image-to-Image_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prep_img(img_link : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor:</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Preprocesses an image from a given link.</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_link (str): The URL or path to the image file.</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        torch.Tensor: A tensor representing the preprocessed image.</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-11">    </span>
<span id="cb7-12">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastDownload().download(img_link)</span>
<span id="cb7-13">    init_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(p).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>))</span>
<span id="cb7-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToTensor()(init_image)</span></code></pre></div>
</div>
<p>The image we will use as a starting point.</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Downloading the image (click to show/hide)</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">link <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn-uploads.huggingface.co/production/uploads/1664665907257-noauth.png"</span></span>
<span id="cb8-2">transformed_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prep_img(link)</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show image in notebook.</span></span>
<span id="cb8-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastDownload().download(link)</span>
<span id="cb8-5">display(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(p).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>).resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_Image-to-Image_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tokenization(prompt: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, max_len : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> torch.Tensor:</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Tokenizes a text prompt and returns the corresponding encoded tensor.</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        prompt (list): The input text prompt to be tokenized.</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_len (int, optional): The maximum length of the tokenized sequence. If not specified,</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            it defaults to the maximum length allowed by the tokenizer.</span></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        torch.Tensor: A tensor containing the encoded representation of the tokenized prompt.</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-13"></span>
<span id="cb9-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> max_len <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> : max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.model_max_length</span>
<span id="cb9-15">    </span>
<span id="cb9-16">    tokenized_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(prompt, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_len, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb9-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> text_encoder(tokenized_prompt.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].half()</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_image(latent: torch.Tensor):</span>
<span id="cb9-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Converts a tensor representation of an image into a PIL Image.</span></span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        latent (torch.Tensor): A tensor representing an image.</span></span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        PIL.Image.Image: A PIL Image representing the image.</span></span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-29">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (latent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb9-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Image.fromarray((image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uint8"</span>))</span></code></pre></div>
</div>
<section id="denoising-loop" class="level2">
<h2 class="anchored" data-anchor-id="denoising-loop">Denoising loop</h2>
<p>To ensure the effectiveness of this solution, it is essential to incorporate the “start_step” parameter.</p>
<p>Essentially, we aim to prevent excessive noise from being added to the input image, particularly avoiding the most intense noise additions.</p>
<p>After this initial step, we can proceed with the looping process.</p>
<blockquote class="blockquote">
<p>In summary, the key to success here is to introduce the “start_step” parameter, which helps us avoid excessive noise in the early stages and then continue with the loop as intended.</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-overflow-scroll number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_sample(prompt: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,transformed_image: torch.Tensor ,guidance_scale: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, steps: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>,start_step: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate a sample image based on a text prompt, provided image and guidance parameters.</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        prompt (list): A list of text prompts.</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transformed_image (torch.Tensor): A tensor representing the transformed image.</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        guidance_scale (float, optional): The scale factor for guiding the generation process.</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seed (int, optional): Seed for random number generation. Default is 5.</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        steps (int, optional): The total number of steps for the generation process. Default is 70.</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        start_step (int, optional): The step at which the generation process starts. Default is 10.</span></span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        torch.Tensor: A tensor representing the generated sample.</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function generates an image based on the provided text prompts , transformed image and parametrs.It uses a predefined</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    VAE model to encode the image and then applies noise and guidance to generate the sample.It iteratively</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    refines the image by adding noise and updating the latent representation. The guidance scale controls the</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    influence of the text prompts on the image. The generated image is returned as a PyTorch tensor.</span></span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example:</span></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; prompt = ["Translate the following English sentence to French: 'Hello, how are you?'"]</span></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; transformed_image = prep_img(image_link)</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; generated_sample = create_sample(prompt, transformed_image)</span></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb10-26">    </span>
<span id="cb10-27">    bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Implementation for only a single prompt.</span></span>
<span id="cb10-28">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenization(prompt)</span>
<span id="cb10-29">    uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenization([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb10-30">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([uncond, text])</span>
<span id="cb10-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> seed:</span>
<span id="cb10-32">        torch.manual_seed(seed)</span>
<span id="cb10-33"></span>
<span id="cb10-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode image</span></span>
<span id="cb10-35">    image_latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.encode((transformed_image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).half().to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>))).latent_dist.sample()</span>
<span id="cb10-36">    image_latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.config.scaling_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> image_latent</span>
<span id="cb10-37"></span>
<span id="cb10-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create noise</span></span>
<span id="cb10-39">    scheduler.set_timesteps(steps)</span>
<span id="cb10-40">    noise_latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(image_latent)</span>
<span id="cb10-41"></span>
<span id="cb10-42">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.add_noise(image_latent, noise_latents,</span>
<span id="cb10-43">                                  timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.tensor([scheduler.timesteps[start_step]]))</span>
<span id="cb10-44"></span>
<span id="cb10-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb10-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_step:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip the batches of noise that don't affect the input image.</span></span>
<span id="cb10-47">            inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), ts)</span>
<span id="cb10-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb10-49">                noise_pred_uncond, noise_pred_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-50">            pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> noise_pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (noise_pred_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> noise_pred_uncond)</span>
<span id="cb10-51">            latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb10-52"></span>
<span id="cb10-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb10-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> latents).sample</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wolf howling at the moon, photorealistic 4K'</span>]</span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#prompt = ['unicorn']</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#prompt = ['a kids drawing of bacteria, cartoon style']</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#prompt = [' Horse looking at the morning sun, photorealistic 4K']</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_sample(prompt,transformed_image,steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">display(make_image(image[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.galax.dev/posts/00_Image-to-Image_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Deep Learning</category>
  <category>Stable Diffusion</category>
  <category>Implementation</category>
  <guid>https://www.galax.dev/posts/00_Image-to-Image.html</guid>
  <pubDate>Mon, 02 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://www.galax.dev/posts/images/img2img.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
